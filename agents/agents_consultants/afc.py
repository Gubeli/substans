#!/usr/bin/env python3

"""
Agent Fact Checker (AFC)
Agent sp√©cialis√© dans la v√©rification des faits, chiffres et informations
"""

import json
import os
import re
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import hashlib

class AgentFactChecker:
    def __init__(self):
        self.agent_id = "AFC"
        self.nom = "Agent Fact Checker"
        self.version = "1.0"
        self.specialisation = "V√©rification des faits, chiffres et informations"
        
        # Configuration de v√©rification
        self.verification_config = {
            "sources_prioritaires": [
                "manus.ai",
                "perplexity.ai", 
                "wikipedia.org",
                "reuters.com",
                "bloomberg.com",
                "financial-times.com",
                "insee.fr",
                "eurostat.europa.eu"
            ],
            "types_verification": [
                "chiffres_financiers",
                "dates_evenements", 
                "noms_personnes",
                "noms_entreprises",
                "donnees_marche",
                "statistiques",
                "citations",
                "references_legales"
            ],
            "seuil_confiance": 0.8,
            "delai_verification": 300  # 5 minutes max par document
        }
        
        # Patterns de d√©tection
        self.patterns = {
            "chiffres": r'\b\d+(?:[.,]\d+)*\s*(?:%|‚Ç¨|\$|M‚Ç¨|M\$|milliards?|millions?|k‚Ç¨|k\$)\b',
            "dates": r'\b(?:\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{2,4}|\d{4}|\d{1,2}\s+(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+\d{4})\b',
            "entreprises": r'\b[A-Z][a-zA-Z\s&]{2,30}(?:\s+(?:Inc|Ltd|SA|SAS|SARL|Corp|Corporation|Company|Co)\b)?\b',
            "personnes": r'\b[A-Z][a-z]+\s+[A-Z][a-z]+\b',
            "pourcentages": r'\b\d+(?:[.,]\d+)?%\b',
            "urls": r'https?://[^\s<>"{}|\\^`\[\]]+',
            "emails": r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        }
        
        # Cache de v√©rifications
        self.cache_verifications = {}
        
        print(f"‚úÖ {self.nom} v{self.version} initialis√©")
        print(f"üîç Sp√©cialisation: {self.specialisation}")

    def verifier_document(self, document: Dict[str, Any]) -> Dict[str, Any]:
        """
        V√©rifie un document complet
        """
        print(f"üîç V√©rification du document: {document.get('title', 'Sans titre')}")
        
        contenu = document.get('content', '')
        if not contenu:
            return self._generer_rapport_erreur("Contenu vide")
        
        # Extraction des √©l√©ments √† v√©rifier
        elements_detectes = self._extraire_elements(contenu)
        
        # V√©rification de chaque √©l√©ment
        resultats_verification = {}
        for type_element, elements in elements_detectes.items():
            resultats_verification[type_element] = []
            for element in elements:
                resultat = self._verifier_element(element, type_element)
                resultats_verification[type_element].append(resultat)
        
        # G√©n√©ration du rapport
        rapport = self._generer_rapport_verification(document, resultats_verification)
        
        return rapport

    def _extraire_elements(self, contenu: str) -> Dict[str, List[str]]:
        """
        Extrait les √©l√©ments √† v√©rifier du contenu
        """
        elements = {}
        
        for type_pattern, pattern in self.patterns.items():
            matches = re.findall(pattern, contenu, re.IGNORECASE)
            elements[type_pattern] = list(set(matches))  # Supprime les doublons
        
        return elements

    def _verifier_element(self, element: str, type_element: str) -> Dict[str, Any]:
        """
        V√©rifie un √©l√©ment sp√©cifique
        """
        # V√©rifier le cache d'abord
        cache_key = hashlib.md5(f"{element}_{type_element}".encode()).hexdigest()
        if cache_key in self.cache_verifications:
            return self.cache_verifications[cache_key]
        
        resultat = {
            "element": element,
            "type": type_element,
            "verifie": False,
            "confiance": 0.0,
            "sources": [],
            "commentaires": [],
            "suggestions": []
        }
        
        try:
            # Simulation de v√©rification (en production, utiliserait les APIs)
            if type_element == "chiffres":
                resultat = self._verifier_chiffre(element)
            elif type_element == "dates":
                resultat = self._verifier_date(element)
            elif type_element == "entreprises":
                resultat = self._verifier_entreprise(element)
            elif type_element == "personnes":
                resultat = self._verifier_personne(element)
            else:
                resultat = self._verification_generique(element, type_element)
            
            # Mise en cache
            self.cache_verifications[cache_key] = resultat
            
        except Exception as e:
            resultat["commentaires"].append(f"Erreur lors de la v√©rification: {str(e)}")
        
        return resultat

    def _verifier_chiffre(self, chiffre: str) -> Dict[str, Any]:
        """
        V√©rifie la coh√©rence d'un chiffre
        """
        return {
            "element": chiffre,
            "type": "chiffres",
            "verifie": True,
            "confiance": 0.7,  # Confiance mod√©r√©e sans source externe
            "sources": ["Format valid√©"],
            "commentaires": ["Format num√©rique coh√©rent"],
            "suggestions": ["V√©rifier la source de ce chiffre"]
        }

    def _verifier_date(self, date: str) -> Dict[str, Any]:
        """
        V√©rifie la coh√©rence d'une date
        """
        return {
            "element": date,
            "type": "dates",
            "verifie": True,
            "confiance": 0.8,
            "sources": ["Format valid√©"],
            "commentaires": ["Format de date coh√©rent"],
            "suggestions": []
        }

    def _verifier_entreprise(self, entreprise: str) -> Dict[str, Any]:
        """
        V√©rifie l'existence d'une entreprise
        """
        # En production, utiliserait des APIs comme OpenCorporates, etc.
        return {
            "element": entreprise,
            "type": "entreprises",
            "verifie": True,
            "confiance": 0.6,
            "sources": ["Base de donn√©es entreprises"],
            "commentaires": ["Nom d'entreprise plausible"],
            "suggestions": ["V√©rifier l'orthographe exacte"]
        }

    def _verifier_personne(self, personne: str) -> Dict[str, Any]:
        """
        V√©rifie l'existence d'une personne
        """
        return {
            "element": personne,
            "type": "personnes",
            "verifie": True,
            "confiance": 0.5,
            "sources": ["Format valid√©"],
            "commentaires": ["Format de nom coh√©rent"],
            "suggestions": ["V√©rifier l'orthographe et le contexte"]
        }

    def _verification_generique(self, element: str, type_element: str) -> Dict[str, Any]:
        """
        V√©rification g√©n√©rique pour les autres types
        """
        return {
            "element": element,
            "type": type_element,
            "verifie": True,
            "confiance": 0.6,
            "sources": ["V√©rification automatique"],
            "commentaires": ["√âl√©ment d√©tect√© et analys√©"],
            "suggestions": ["V√©rification manuelle recommand√©e"]
        }

    def _generer_rapport_verification(self, document: Dict[str, Any], resultats: Dict[str, List[Dict]]) -> Dict[str, Any]:
        """
        G√©n√®re le rapport de v√©rification complet
        """
        total_elements = sum(len(elements) for elements in resultats.values())
        elements_verifies = sum(
            len([e for e in elements if e.get('verifie', False)]) 
            for elements in resultats.values()
        )
        
        confiance_moyenne = 0.0
        if total_elements > 0:
            confiances = []
            for elements in resultats.values():
                for element in elements:
                    confiances.append(element.get('confiance', 0.0))
            confiance_moyenne = sum(confiances) / len(confiances) if confiances else 0.0
        
        # D√©terminer le statut global
        statut = "APPROUVE"
        if confiance_moyenne < 0.5:
            statut = "REJETE"
        elif confiance_moyenne < 0.7:
            statut = "REVISION_REQUISE"
        
        rapport = {
            "document_id": document.get('id', 'unknown'),
            "document_title": document.get('title', 'Sans titre'),
            "verification_date": datetime.now().isoformat(),
            "agent_verificateur": self.agent_id,
            "statut": statut,
            "score_confiance": round(confiance_moyenne, 2),
            "statistiques": {
                "total_elements": total_elements,
                "elements_verifies": elements_verifies,
                "taux_verification": round((elements_verifies / total_elements) * 100, 1) if total_elements > 0 else 0
            },
            "resultats_detailles": resultats,
            "recommandations": self._generer_recommandations(statut, confiance_moyenne, resultats),
            "actions_requises": self._generer_actions_requises(statut, resultats)
        }
        
        print(f"‚úÖ V√©rification termin√©e - Statut: {statut} - Confiance: {confiance_moyenne:.1%}")
        
        return rapport

    def _generer_recommandations(self, statut: str, confiance: float, resultats: Dict) -> List[str]:
        """
        G√©n√®re des recommandations bas√©es sur les r√©sultats
        """
        recommandations = []
        
        if statut == "REJETE":
            recommandations.append("Document n√©cessite une r√©vision majeure avant publication")
            recommandations.append("V√©rifier manuellement tous les √©l√©ments signal√©s")
        elif statut == "REVISION_REQUISE":
            recommandations.append("R√©vision recommand√©e pour am√©liorer la fiabilit√©")
            recommandations.append("V√©rifier les √©l√©ments √† faible confiance")
        else:
            recommandations.append("Document approuv√© pour publication")
            recommandations.append("V√©rification p√©riodique recommand√©e")
        
        # Recommandations sp√©cifiques par type
        for type_element, elements in resultats.items():
            elements_faible_confiance = [e for e in elements if e.get('confiance', 0) < 0.6]
            if elements_faible_confiance:
                recommandations.append(f"V√©rifier manuellement les {type_element} signal√©s")
        
        return recommandations

    def _generer_actions_requises(self, statut: str, resultats: Dict) -> List[str]:
        """
        G√©n√®re les actions requises
        """
        actions = []
        
        if statut == "REJETE":
            actions.append("BLOQUER la publication du document")
            actions.append("NOTIFIER l'auteur des corrections n√©cessaires")
        elif statut == "REVISION_REQUISE":
            actions.append("MARQUER le document pour r√©vision")
            actions.append("ENVOYER les suggestions de correction")
        else:
            actions.append("AUTORISER la publication")
            actions.append("ARCHIVER le rapport de v√©rification")
        
        return actions

    def _generer_rapport_erreur(self, erreur: str) -> Dict[str, Any]:
        """
        G√©n√®re un rapport d'erreur
        """
        return {
            "statut": "ERREUR",
            "erreur": erreur,
            "verification_date": datetime.now().isoformat(),
            "agent_verificateur": self.agent_id
        }

    def obtenir_statistiques(self) -> Dict[str, Any]:
        """
        Retourne les statistiques de v√©rification
        """
        return {
            "agent_id": self.agent_id,
            "nom": self.nom,
            "version": self.version,
            "verifications_cache": len(self.cache_verifications),
            "types_supportes": list(self.patterns.keys()),
            "sources_configurees": len(self.verification_config["sources_prioritaires"])
        }

def main():
    """Test de l'agent"""
    agent = AgentFactChecker()
    
    # Document de test
    document_test = {
        "id": "test_001",
        "title": "Test de v√©rification",
        "content": """
        Bull a r√©alis√© un chiffre d'affaires de 1.2 milliards d'euros en 2024.
        La soci√©t√©, dirig√©e par Jean Dupont, emploie 15,000 personnes.
        Le march√© du HPC repr√©sente 45% de croissance annuelle.
        Contact: info@bull.com - Site: https://www.bull.com
        """
    }
    
    rapport = agent.verifier_document(document_test)
    print(json.dumps(rapport, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    main()

