#!/bin/bash

# Script de d√©marrage Substans.AI Enterprise v3.0.1
# Usage: ./start.sh

set -e

echo "üöÄ D√©marrage de Substans.AI Enterprise v3.0.1"
echo "=============================================="

# Chargement des variables d'environnement
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
    echo "‚úÖ Variables d'environnement charg√©es"
else
    echo "‚ö†Ô∏è Fichier .env non trouv√©, utilisation des valeurs par d√©faut"
fi

# V√©rification des r√©pertoires
mkdir -p logs data backups temp

# D√©marrage du backend
echo "üêç D√©marrage du backend Flask..."
cd backend/flask_app
source venv/bin/activate

# V√©rification de la base de donn√©es
if [ ! -f "../../data/substans.db" ]; then
    echo "üóÑÔ∏è Initialisation de la base de donn√©es..."
    python -c "
import sqlite3
conn = sqlite3.connect('../../data/substans.db')
conn.execute('CREATE TABLE IF NOT EXISTS test (id INTEGER)')
conn.close()
print('Base de donn√©es cr√©√©e')
"
fi

# D√©marrage en arri√®re-plan
nohup python src/main.py > ../../logs/backend.log 2>&1 &
BACKEND_PID=$!
echo "‚úÖ Backend d√©marr√© (PID: $BACKEND_PID)"

cd ../..

# Attente que le backend soit pr√™t
echo "‚è≥ Attente du d√©marrage du backend..."
for i in {1..30}; do
    if curl -s http://localhost:${API_PORT:-5000}/health > /dev/null 2>&1; then
        echo "‚úÖ Backend pr√™t"
        break
    fi
    sleep 1
done

# D√©marrage du frontend React (si disponible)
if [ -d "frontend/react_interface" ] && [ -f "frontend/react_interface/package.json" ]; then
    echo "‚öõÔ∏è D√©marrage du frontend React..."
    cd frontend/react_interface
    nohup npm start > ../../logs/frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo "‚úÖ Frontend React d√©marr√© (PID: $FRONTEND_PID)"
    cd ../..
fi

# Sauvegarde des PIDs
echo $BACKEND_PID > logs/backend.pid
if [ ! -z "$FRONTEND_PID" ]; then
    echo $FRONTEND_PID > logs/frontend.pid
fi

# Affichage des informations de connexion
echo ""
echo "üéâ Substans.AI Enterprise v3.0.1 d√©marr√© avec succ√®s !"
echo ""
echo "üåê Acc√®s web :"
echo "   - Interface principale : http://localhost:${API_PORT:-5000}"
if [ ! -z "$FRONTEND_PID" ]; then
echo "   - Interface React : http://localhost:${FRONTEND_PORT:-3000}"
fi
echo ""
echo "üìä API Endpoints :"
echo "   - Health check : http://localhost:${API_PORT:-5000}/health"
echo "   - Dashboard : http://localhost:${API_PORT:-5000}/"
echo "   - API Missions : http://localhost:${API_PORT:-5000}/api/missions"
echo "   - API Agents : http://localhost:${API_PORT:-5000}/api/agents"
echo ""
echo "üìù Logs en temps r√©el :"
echo "   - Backend : tail -f logs/backend.log"
echo "   - Frontend : tail -f logs/frontend.log"
echo "   - Syst√®me : tail -f logs/substans.log"
echo ""
echo "üõë Pour arr√™ter : ./deployment/stop.sh"
echo "üîÑ Pour red√©marrer : ./deployment/restart.sh"
echo ""

# Monitoring de base
echo "üìä Statut des services :"
if ps -p $BACKEND_PID > /dev/null; then
    echo "   ‚úÖ Backend Flask : Actif (PID: $BACKEND_PID)"
else
    echo "   ‚ùå Backend Flask : Erreur"
fi

if [ ! -z "$FRONTEND_PID" ] && ps -p $FRONTEND_PID > /dev/null; then
    echo "   ‚úÖ Frontend React : Actif (PID: $FRONTEND_PID)"
elif [ ! -z "$FRONTEND_PID" ]; then
    echo "   ‚ùå Frontend React : Erreur"
fi

echo ""
echo "üéØ Substans.AI Enterprise v3.0.1 est op√©rationnel !"
echo "   34 agents experts disponibles"
echo "   47 syst√®mes enterprise actifs"
echo "   API compl√®te avec authentification"
echo "   Interface responsive et mobile-friendly"
echo ""

